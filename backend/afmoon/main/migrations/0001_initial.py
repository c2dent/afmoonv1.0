# Generated by Django 2.2.5 on 2020-03-23 15:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import main.utilities
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone_number', models.CharField(db_index=True, max_length=20, unique=True, verbose_name='телефон номер')),
                ('avatar', models.ImageField(blank=True, default='images/user.png', null=True, upload_to=main.utilities.get_timestamp_path, verbose_name='Аватар')),
                ('nickname', models.CharField(blank=True, max_length=40, null=True, verbose_name='Никнейм')),
                ('register_date', models.DateField(auto_now_add=True, verbose_name='Дата регистрация')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Суперпользователь')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='BaseProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40, verbose_name='Названия')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описания')),
                ('price', models.FloatField(blank=True, null=True, verbose_name='Цена')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is_Active')),
                ('views', models.IntegerField(default=0, verbose_name='Просмотрый')),
                ('slug', models.SlugField(blank=True)),
            ],
            options={
                'verbose_name': 'Объявление',
                'verbose_name_plural': 'Объявления',
                'ordering': ['-add_date'],
            },
        ),
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('baseproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.BaseProduct')),
                ('floors_in_house', models.IntegerField(default=0, verbose_name='Этажы в доме')),
                ('floor', models.IntegerField(default=0, verbose_name='этаж')),
                ('number_rooms', models.IntegerField(choices=[(1, '1 комнат'), (2, '2 комнат'), (3, '3 комнат'), (4, '4 комнат'), (5, '5 и более комнат'), (6, 'Свободная планировка'), (7, 'Студия')], verbose_name='Количество комнат')),
                ('total_area', models.IntegerField(default=1, verbose_name='Общая площадь')),
                ('rent_buy', models.BooleanField(default=True, verbose_name='Снять или Купить')),
            ],
            bases=('main.baseproduct',),
        ),
        migrations.CreateModel(
            name='Avtomobil',
            fields=[
                ('baseproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.BaseProduct')),
                ('mark_model', models.IntegerField(choices=[('Audi', [(1, '100'), (2, '200'), (3, '80'), (4, '90'), (5, 'A1'), (6, 'A2'), (7, 'A3'), (8, 'A4'), (9, 'A4 Allroad Quattro'), (10, 'A7'), (11, 'A8'), (12, 'Cabriolet'), (13, 'Coupe'), (14, 'Q2'), (15, 'Q3'), (16, 'Q5'), (17, 'Quattro'), (18, 'R8'), (19, 'RS Q3'), (20, 'RS2'), (21, 'RS3'), (22, 'RS4'), (23, 'RS5'), (24, 'RS6'), (25, 'RS7'), (26, 'S1'), (27, 'S2'), (28, 'S3'), (29, 'S4'), (30, 'S5'), (31, 'S6'), (32, 'S7'), (33, 'S8'), (34, 'SQ5'), (35, 'SQ7'), (36, 'TT'), (37, 'TT RS'), (38, 'TTS'), (39, 'V8'), (40, 'other')]), ('BMW', [(41, '1 серия'), (42, '1M')])], verbose_name='Марка и модель')),
                ('year_issue', models.IntegerField(verbose_name='Год выпуска')),
                ('gear_shift', models.IntegerField(choices=[(1, 'механика'), (2, 'робот'), (3, 'автомат')], verbose_name='Коробка передач')),
                ('body_type', models.IntegerField(choices=[(1, 'седан'), (2, 'хетчбэк'), (3, 'универсал'), (4, 'внедорожник'), (5, 'кабриолет'), (6, 'купе'), (7, 'лимузин'), (8, 'минивэн'), (9, 'пикап'), (10, 'фургон'), (11, 'микроавтобус')], verbose_name='Тип кузова')),
                ('engine_type', models.IntegerField(choices=[(1, 'бензин'), (2, 'дизель'), (3, 'гибрид'), (4, 'электро'), (5, 'газ')], verbose_name='Тип двигателя')),
                ('mileage', models.IntegerField(verbose_name='Пробег')),
                ('drive_unit', models.IntegerField(choices=[(1, 'передний'), (2, 'польный'), (3, 'задний')], verbose_name='Привод')),
                ('condition', models.BooleanField(default=True, verbose_name='Состояние')),
            ],
            bases=('main.baseproduct',),
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('baseproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.BaseProduct')),
                ('house_area', models.IntegerField(default=1, verbose_name='Площадь дома')),
                ('land_area', models.IntegerField(default=1, verbose_name='Площадь участка')),
            ],
            bases=('main.baseproduct',),
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('baseproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.BaseProduct')),
                ('land_area', models.IntegerField(default=1, verbose_name='Площадь')),
            ],
            bases=('main.baseproduct',),
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('baseproduct_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.BaseProduct')),
                ('schedule', models.IntegerField(choices=[(1, 'Вахтовый метод'), (2, 'Неполный день'), (3, 'Полный день'), (4, 'Свободный график'), (5, 'Сменный график'), (6, 'Удаленная работв')], verbose_name='График работы')),
                ('work_experience', models.IntegerField(choices=[(1, 'Не имеет значение'), (2, 'более 1 года'), (3, 'более 2 года'), (4, 'более 3 лет'), (5, 'более 5 лет'), (6, 'более 10 лет')], verbose_name='Опыть работы')),
            ],
            bases=('main.baseproduct',),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Регион')),
                ('slug', models.SlugField(blank=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.Region')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Категоры')),
                ('slug', models.SlugField(blank=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.Category')),
            ],
            options={
                'verbose_name': 'Categories',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.AddField(
            model_name='baseproduct',
            name='category',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='ad', to='main.Category'),
        ),
        migrations.AddField(
            model_name='baseproduct',
            name='favorite_for',
            field=models.ManyToManyField(blank=True, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='Избранные'),
        ),
        migrations.AddField(
            model_name='baseproduct',
            name='region',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='ad', to='main.Region'),
        ),
        migrations.AddField(
            model_name='baseproduct',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ad', to=settings.AUTH_USER_MODEL, verbose_name='Владелес'),
        ),
        migrations.CreateModel(
            name='AdditonalImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=main.utilities.get_timestamp_path, verbose_name='Изображения')),
                ('baseproduct', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='main.BaseProduct', verbose_name='Объявления')),
            ],
            options={
                'verbose_name': 'Дополнительная иллюстрация',
                'verbose_name_plural': 'Дополнительная иллюстрации',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Region', verbose_name=''),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('vacancy_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Vacancy')),
                ('gender', models.BooleanField(default=True, verbose_name='Пол')),
                ('age', models.IntegerField(verbose_name='Возраст')),
            ],
            bases=('main.vacancy',),
        ),
    ]
